on: [push, pull_request]

name: CI

env:
  CARGO_DEB: 1.37.0

jobs:
  fmt:
    name: Format check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Install rustfmt
        run: rustup component add rustfmt
      - name: Perform format check
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy lints
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy
          override: true
      - name: Perform clippy check
        uses: actions-rs/clippy-check@v1
        with:
          name: Clippy Output
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features

  test:
    name: Test
    needs: fmt
    strategy:
      matrix:
        os:
        - ubuntu-latest
        - windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Cache dependencies
        uses: actions/cache@v2
        env:
          cache-name: cache-dependencies
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            target
          key: test-${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}
      - name: Test
        run: |
          cargo test --locked

  msrv:
    name: MSRV check
    needs: fmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.57.0
          override: true
      - name: Cache dependencies
        uses: actions/cache@v2
        env:
          cache-name: cache-dependencies
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            target
          key: msrv-${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}
      - name: Perform MSRV check
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --locked --tests

  build-linux:
    name: Linux build
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/ci'
    needs:
      - test
      - msrv
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: x86_64-unknown-linux-musl
          override: true
      - name: Install APT packages
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: musl-tools # provides musl-gcc
          version: 1.0
      - name: Cache dependencies
        uses: actions/cache@v2
        env:
          cache-name: cache-dependencies
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            target
          key: build-${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}
      - name: Cache cargo tools
        id: cargo-tools-cache
        uses: actions/cache@v2
        env:
          cache-name: cache-cargo-tools
        with:
          path: cargo-tools
          key: cargo-tools-${{ env.CARGO_DEB }}
      - name: Install cargo tools if not cached
        if: steps.cargo-tools-cache.outputs.cache-hit != 'true'
        run: |
          cargo install cargo-deb --version ${{ env.CARGO_DEB }} --root cargo-tools --target-dir cargo-tools-build
      - name: Build
        run: |
          cargo build --locked --release --target=x86_64-unknown-linux-musl
          PATH="$PATH:$PWD/cargo-tools/bin" cargo deb --no-build --target=x86_64-unknown-linux-musl
      - name: Remove version & arch suffix from .deb file
        run: cp target/x86_64-unknown-linux-musl/debian/*.deb target/x86_64-unknown-linux-musl/debian/bard.deb
      # call upload-artifact twice to flatten resulting directory structure
      - name: Upload linux binary
        uses: actions/upload-artifact@v3
        with:
          name: bard-linux
          path: target/x86_64-unknown-linux-musl/release/bard
      - name: Upload deb package
        uses: actions/upload-artifact@v3
        with:
          name: bard-linux
          path: target/x86_64-unknown-linux-musl/debian/bard.deb

  build-windows:
    name: Windows build
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/ci'
    needs:
      - test
      - msrv
    runs-on: windows-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Setup Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Cache dependencies
        uses: actions/cache@v2
        env:
          cache-name: cache-dependencies
        with:
          path: |
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            target
          key: build-${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('Cargo.lock') }}
      - name: Build
        run: |
          cargo build --locked --release
      - name: Upload Windows exe
        uses: actions/upload-artifact@v3
        with:
          name: bard-windows
          path: target/release/bard.exe

  deploy-docker:
    name: Deploy to DockerHub
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/ci'
    needs:
      - build-linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2 # need the Dockerfile
      - uses: actions/download-artifact@v3
        with:
          name: bard-linux
          path: bard-linux
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker
      - name: Docker metadata
        uses: docker/metadata-action@v4
        id: meta
        with:
          images: vojtechkral/bard
          tags: |
            type=ref,event=tag
            type=sha,prefix=git-
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: .github/workflows/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  daft-release:
    name: Draf Release
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - build-linux
      - build-windows
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        # no options -> gets all the artifacts
      - name: Create a Release draft
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          name: ${{ github.event.head_commit.message }}
          files: |
            ./bard-linux/bard
            ./bard-linux/bard.deb
            ./bard-windows/bard.exe
